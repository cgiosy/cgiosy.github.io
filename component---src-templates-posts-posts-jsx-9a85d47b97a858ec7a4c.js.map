{"version":3,"sources":["webpack:///./src/components/PostTitle/PostTitle.jsx","webpack:///./src/components/PostPagination/PostPagination.jsx","webpack:///./src/templates/Posts/Posts.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostPreview/PostPreview.jsx","webpack:///./src/components/DateTime/DateTime.jsx","webpack:///./src/components/PostListItem/PostListItem.jsx","webpack:///./src/components/PostList/PostList.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["PostTitle","children","style","className","Page","current","page","to","PostPagination","pageContext","currentPage","lastPage","pageCount","startPage","Math","max","endPage","min","firstPage","Array","map","_val","index","key","postsQuery","Posts","data","postEdges","allMarkdownRemark","edges","isRoot","title","config","siteTitle","SEO","PostList","definition","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","PostPreview","DateTime","PostListItem","post","path","date","timeToRead","postEdge","node","fields","slug","tags","frontmatter","cover","excerpt","description","image","postURL","postNode","postPath","postSEO","postMeta","siteLogo","urljoin","siteUrl","pathPrefix","siteDescription","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-posts-posts-jsx-9a85d47b97a858ec7a4c.js","sourcesContent":["import React from \"react\";\nimport \"./PostTitle.css\"\n\nconst PostTitle = ({children, style}) => (\n  <h1 className=\"post-title\" style={style}>{children}</h1>\n);\n\nexport default PostTitle;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./PostPagination.css\";\n\nconst paginationRadius = 1;\n\nconst Page = ({ current, page, children }) => (\n  <Link\n    className={\"pagination-item\" + (page === current ? \" pagination-selected\" : \"\")}\n    to={page === 1 ? \"/posts\" : `/posts/${page}/`}\n  >\n    {children}\n  </Link>\n)\n\nconst PostPagination = ({ pageContext }) => {\n  const { currentPage, pageCount } = pageContext;\n  const firstPage = 1;\n  const lastPage = pageCount;\n  const startPage = Math.max(currentPage - paginationRadius, firstPage);\n  const endPage = Math.min(currentPage + paginationRadius, lastPage);\n\n  return (\n    <div className=\"pagination-container\">\n      {startPage > firstPage && <Page current={currentPage} page={1}>1</Page>}\n\n      {startPage > firstPage + 1 && <Page current={currentPage} page={startPage - 1}>...</Page>}\n\n      {[...Array(endPage - startPage + 1)].map((_val, index) => {\n        const page = startPage + index;\n        return (\n          <Page current={currentPage} page={page} key={page}>{page}</Page>\n        )\n      }\n      )}\n\n      {endPage + 1 < lastPage && <Page current={currentPage} page={endPage + 1}>...</Page>}\n\n      {endPage < lastPage && <Page current={currentPage} page={lastPage}>{lastPage}</Page>}\n    </div>\n  );\n}\n\nexport default PostPagination;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport config from \"../../../data/SiteConfig\";\nimport SEO from \"../../components/SEO/SEO\";\nimport Layout from \"../../layout\";\nimport PostList from \"../../components/PostList/PostList\";\nimport PostPagination from \"../../components/PostPagination/PostPagination\";\nimport \"./Posts.css\";\n\nconst Posts = ({ data, pageContext }) => {\n  const postEdges = data.allMarkdownRemark.edges;\n  const isRoot = pageContext.isRoot;\n\n  return (\n    <Layout isRoot={isRoot}>\n      <Helmet title={config.siteTitle}></Helmet>\n      <SEO />\n      <div className=\"posts-container\">\n        <PostList postEdges={postEdges} />\n        <PostPagination pageContext={pageContext} />\n      </div>\n    </Layout>\n  );\n}\n\nexport default Posts;\n\n/* eslint no-undef: \"off\" */\nexport const postsQuery = graphql`\n  query PostsQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          html\n          timeToRead\n          fields {\n            slug\n            date\n          }\n          frontmatter {\n            title\n            tags\n            cover\n            date(formatString: \"YYYY-MM-DD hh:mm\")\n          }\n        }\n      }\n    }\n  }\n`;\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from \"react\";\nimport \"./PostPreview.css\"\n\nconst PostPreview = ({children}) => (\n  <p className=\"post-preview\">{children}</p>\n);\n\nexport default PostPreview;\n","import React from \"react\";\nimport \"./DateTime.css\"\n\nconst DateTime = ({ children }) => (\n  <time className=\"datetime\">{children}</time>\n);\n\nexport default DateTime;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport PostTitle from \"../PostTitle/PostTitle\";\nimport PostPreview from \"../PostPreview/PostPreview\";\nimport DateTime from \"../DateTime/DateTime\";\nimport \"./PostListItem.css\";\n\nconst PostListItem = ({ post }) => (\n  <Link className=\"post-list-item\" to={post.path}>\n    <PostTitle path={post.path}>{post.title}</PostTitle>\n    <DateTime>{post.date} · {post.timeToRead} min read</DateTime>\n    <PostPreview></PostPreview>\n  </Link>\n)\n\nexport default PostListItem;\n","import React from \"react\";\nimport PostListItem from \"../PostListItem/PostListItem\";\nimport \"./PostList.css\";\n\nconst PostList = ({ postEdges }) => (\n  <div className=\"post-list\">\n    {\n      postEdges.map(postEdge => ({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.frontmatter.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })).map(post => (\n        <PostListItem post={post} key={post.path} />\n      ))\n    }\n  </div>\n);\n\nexport default PostList;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nconst SEO = ({ postNode, postPath, postSEO }) => {\n  let title;\n  let description;\n  let image;\n  let postURL;\n  if (postSEO) {\n    const postMeta = postNode.frontmatter;\n    ({ title } = postMeta);\n    description = postMeta.description\n      ? postMeta.description\n      : postNode.excerpt;\n    image = postMeta.cover || config.siteLogo;\n    postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n  } else {\n    title = config.siteTitle;\n    description = config.siteDescription;\n    image = config.siteLogo;\n  }\n\n  if (\n    image &&\n    !image.match(\n      `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n    )\n  )\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n  const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"WebSite\",\n      url: blogURL,\n      name: title,\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n    }\n  ];\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        itemListElement: [\n          {\n            \"@type\": \"ListItem\",\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image\n            }\n          }\n        ]\n      },\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n        headline: title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: image\n        },\n        description\n      }\n    );\n  }\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n      {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n      <meta\n        property=\"fb:app_id\"\n        content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n      />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta\n        name=\"twitter:creator\"\n        content={config.userTwitter ? config.userTwitter : \"\"}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  );\n}\n\nexport default SEO;\n"],"sourceRoot":""}